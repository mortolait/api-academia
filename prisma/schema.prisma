// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum Sex {
  male
  female
  other
}

enum Status {
  ativo
  inativo
  excluido
  suspenso
}

enum FormOfContact {
  personal
  email
  phone
  whatsapp
  facebook
  instagram
  other
}

enum Type {
  lead
  client
}

enum TypeCashRegister {
  open
  close
}

enum StatusContract {
  active
  inactive
  queue
}

model User {
  id              String         @id @default(uuid())
  name            String
  integration_wpp Boolean?
  email           String         @unique()
  password_hash   String
  create_at       DateTime       @default(now())
  role            Role           @default(MEMBER)
  cashRegisters   CashRegister[]
}

model Gym {
  id          String   @id @default(uuid())
  title       String
  description String?
  phone       String?
  latitude    Decimal
  longitude   Decimal
  create_at   DateTime @default(now())
  user_id     String

  @@map("gyms")
}

model Intructor {
  id             String    @id @default(uuid())
  full_name      String
  date_of_birth  DateTime?
  education      String?
  certifications String?
  phone          String
  email          String    @unique()
  address        String?
  start_date     DateTime?
  status         Status?
  sex            Sex?
  salary         Float?
  create_at      DateTime  @default(now())
  user_id        String

  @@map("Intructors")
}

model Student {
  id                    String             @id @default(uuid())
  full_name             String
  date_of_birth         DateTime?
  sex                   Sex?
  document              String?
  phone                 String
  email                 String             @unique()
  medical_history       String?
  medications           String?
  emergency_contact     String?
  exercise_restrictions String?
  status                Status?
  start_date            DateTime?
  create_at             DateTime           @default(now())
  goals                 String?
  referral              String?
  how_arrived           String?
  user_id               String
  statusContract        String?
  type                  Type?
  contracts             ContractOnSale[]
  contacts              ContactOnStudent[]
  Sale                  Sale[]

  @@map("Students")
}

//contract
model Contract {
  id                     String   @id @default(uuid())
  code                   String
  active                 Boolean  @default(true)
  description            String
  installments           Int
  amount                 Float
  amount_per_installment Float
  create_at              DateTime @default(now())
  user_id                String

  contractsOnSale ContractOnSale[]

  @@map("Contracts")
}

enum PaymentStatus {
  PAID
  PENDING
  PARTIALLY_PAID
}

model Sale {
  id                 String           @id @default(uuid())
  code               String
  create_at          DateTime         @default(now())
  idClient           String
  user_id            String
  total_amount       Float
  valueDiscount      Float
  total_received     Float
  statusPayment      PaymentStatus    @default(PAID)
  outstandingBalance Float            @default(0)
  datePayment        DateTime         @default(now())
  products           ProductOnSale[]
  contracts          ContractOnSale[]
  services           ServiceOnSale[]
  payments           PaymentOnSale[]
  student            Student          @relation(fields: [idClient], references: [id])
  idCashOpen         String
  CashRegister       CashRegister?    @relation(fields: [idCashOpen], references: [id])

  @@map("Sales")
}

model ContactOnStudent {
  id         String   @id @default(uuid())
  id_student String
  id_user    String
  type       String
  subject    String?
  content    String
  createAt   DateTime @default(now())
  student    Student  @relation(fields: [id_student], references: [id])
}

model ProductOnSale {
  id            String  @default(uuid())
  saleId        String
  productId     String
  quantity      Float
  valueDiscount Float
  value         Float
  id_client     String
  sale          Sale    @relation(fields: [saleId], references: [id])
  product       Product @relation(fields: [productId], references: [id])

  @@id([saleId, productId])
}

model ContractOnSale {
  id            String   @id @default(uuid())
  saleId        String
  contractId    String
  valueDiscount Float
  value         Float
  startDate     DateTime
  endDate       DateTime
  id_client     String
  student       Student  @relation(fields: [id_client], references: [id])
  status        String
  sale          Sale     @relation(fields: [saleId], references: [id])
  contract      Contract @relation(fields: [contractId], references: [id])
}

model ServiceOnSale {
  id            String  @default(uuid())
  saleId        String
  serviceId     String
  quantity      Float
  valueDiscount Float
  value         Float
  id_client     String
  sale          Sale    @relation(fields: [saleId], references: [id])
  service       Service @relation(fields: [serviceId], references: [id])

  @@id([saleId, serviceId])
}

model PaymentOnSale {
  id        String @default(uuid())
  saleId    String
  type      String
  value     Float
  id_client String
  sale      Sale   @relation(fields: [saleId], references: [id])

  @@id([id])
}

model Product {
  id                        String   @id @default(uuid())
  description               String?
  code                      String   @unique()
  selling_price             Float
  purchase_price            Float
  allows_sale_without_stock Boolean
  current_quantity          Float
  minimum_quantity          Float
  create_at                 DateTime @default(now())
  user_id                   String
  active                    Boolean

  productOnSale ProductOnSale[]

  @@map("Products")
}

model Service {
  id            String          @id @default(uuid())
  title         String
  description   String?
  amount        Float
  create_at     DateTime        @default(now())
  user_id       String
  active        Boolean
  code          String
  serviceOnSale ServiceOnSale[]

  @@map("Services")
}

model CashRegister {
  id                       String                    @id @default(uuid())
  open_date                DateTime
  close_date               DateTime?
  initial_balance          Float
  final_balance            Float
  total_income             Float
  total_expense            Float
  user_id                  String
  status                   TypeCashRegister          @default(close)
  sales                    Sale[]
  user                     User                      @relation(fields: [user_id], references: [id])
  cashRegisterTransactions CashRegisterTransaction[]

  @@map("cash_registers")
}

model CashRegisterTransaction {
  id             String   @id @default(uuid())
  name           String?
  description    String?
  paymentForm    String?
  date_at        DateTime
  type           String
  value          Float
  idCashRegister String
  cashRegister CashRegister @relation(fields: [idCashRegister], references: [id])
}
